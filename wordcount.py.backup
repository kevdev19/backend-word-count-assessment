#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2010 Google Inc.
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0

"""Wordcount exercise

The main() function is already defined and complete. It calls the
print_words() and print_top() functions, which you fill in.

See the README for instructions.

Use str.split() (no arguments) to split on all whitespace.

Workflow: don't build the whole program at once. Get it to an intermediate
milestone and print your data structure. Once that's working, try for the
next milestone.

Implement the create_word_dict() helper function that has been defined in
order to avoid code duplication within print_words() and print_top(). It
should return a dictionary with words as keys, and their counts as values.
"""

# Your name, plus anyone who helped you with this assignment
# Give credit where credit is due.
__author__ = "Kevin Blount"

import sys


def create_word_dict(filename):
    new_list = []
    with open(filename, "r") as rf:
        for line in rf:
            line = line.split()

            for word in line:
                new_list.append(word)

    new_list.sort()
    new_dict = {}
    for word in new_list:
        new_dict[word] = new_list.count(word)
    print('\n{:^8}{:^8}'.format('Word', 'Count'))

    for word in new_dict:
        print('{:^8}{:^8d}'.format(word, new_dict[word]))


def print_words(filename):
    create_word_dict(filename)


def print_top(filename):
    pass

# This basic command line argument parsing code is provided and calls
# the print_words() and print_top() functions which you must implement.


def main(args):
    if len(args) != 2:
        print('usage: python wordcount.py {--count | --topcount} file')
        sys.exit(1)
    option = args[0]
    filename = args[1]

    if option == '--count':
        print_words(filename)
    elif option == '--topcount':
        print_top(filename)
    else:
        print('unknown option: ' + option)


if __name__ == '__main__':
    main(sys.argv[1:])
